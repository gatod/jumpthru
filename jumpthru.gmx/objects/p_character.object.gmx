<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>p_actor</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialization
event_inherited();
script = -1;
//Actions
on_ground = false;
walk = false; //Walking
walk_spd = 3; //Walking Speed
walk_dir = 0; //Walking Direction
jump = false; //Jumping
jump_spd = 8; //Jumping Speed
jump_sta = 0; //Jumping Status (0 - normal, 1 - jumping, 2 - falling)
actflags = 0; //Action Flags
/*
Used for easily returning the state of an actor from a script
0 . Walk
1 - Jump
*/

///Character Sprites
sprite = array_create(3);
sprite[ActionID.idle] = sprite_index;
sprite[ActionID.walk] = sprite_index;
sprite[ActionID.jump] = sprite_index;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Execute Control Script
if (script != -1)
&amp;&amp; (script_exists(script)) {
  actflags = script_execute(script, id);
  walk = (actflags &amp; (1 &lt;&lt; 0));
  jump = (actflags &amp; (1 &lt;&lt; 1));
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement
on_ground = (place_meeting(x, y + sign(g), p_solid) || (place_meeting(x, y + sign(g), p_semisolid) &amp;&amp; !place_meeting(x, y, p_semisolid)));
if (walk) { imp_x = (walk_spd * sign(walk_dir)); }
if (on_ground)
&amp;&amp; !(jump) { jump_sta = 0; }
switch (jump_sta) {
  case 0:
    if (jump &amp;&amp; on_ground) {
      imp_y = (jump_spd * sign(g * -1));
      jump_sta = 1;
    }
    else if !(on_ground) { jump_sta = 2; }
    break;
  case 1:
    if (spd_y &lt; 0 &amp;&amp; !jump) {
      spd_y /= 2;
      jump_sta = 2;
    }
    break;
  case 2:
    if (on_ground &amp;&amp; !jump) { jump_sta = 0; }
    break;
}
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sprite
if (on_ground) {
  if (walk) { sprite_index = sprite[ActionID.walk]; }
  else { sprite_index = sprite[ActionID.idle]; }
}
else { sprite_index = sprite[ActionID.jump]; }
if (walk_dir == 0) { walk_dir = sign(image_xscale); }
else { image_xscale = sign(walk_dir); }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
